version: '3.8'

services:
    traefik:
        image: traefik:v2.10.4
        container_name: traefik
        restart: always
        ports:
            # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
            - 80:80
            # Listen on port 443, default for HTTPS
            - 443:443
        volumes:
            # Add Docker as a mounted volume, so that Traefik can read the labels of other services
            - /var/run/docker.sock:/var/run/docker.sock:ro
            # Mount the volume to store the certificates
            - traefik-public-certificates:/certificates
        command:
            # Enable Docker in Traefik, so that it reads labels from Doker services
            - "--providers.docker=true"
            # Do not expose all Docker services, only the ones explicitly exposed
            - "--providers.docker.exposedbydefault=false"
            # Create a entrypoint "http" listening on port 80
            - "--entrypoints.web.address=:80"
            # Create a entrypoint "https" listening on port 443
            - "--entrypoints.websecure.address=:443"
            - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
            - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
            # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
            - "--certificatesresolvers.le.acme.email=angelgarcia@idom.com"
            # Store the Let's Encrypt certificates in the mounted volume
            - "--certificatesresolvers.le.acme.storage=/certificates/acme.json"
            # Use the TLS Challenge for Let's Encrypt
            - "--certificatesresolvers.le.acme.tlschallenge=true"
            # Enable the access log, with HTTP requests
            - "--accesslog"
            # Enable the Traefik log, for configurations and errors
            - "--log"

    app:
        container_name: app
        hostname: app
        restart: always
        build:
            context: .
            dockerfile: Dockerfile.prod
        expose:
            - "8000"
        env_file:
            - .env
        volumes:
            - api-data:/api
        depends_on:
            db:
                condition: service_healthy
        labels:
            # Enable Traefik for this specific "backend" service
            - "traefik.enable=true"
            - "traefik.http.routers.app.rule=Host(`api.geoidom.com`)"
            # Define the port inside of the Docker service to use
            - "traefik.http.services.app.loadbalancer.server.port=8000"
            - "traefik.http.routers.app.entrypoints=websecure"
            # Use the "le" (Let's Encrypt) resolver
            - "traefik.http.routers.app.tls=true"
            - "traefik.http.routers.app.tls.certresolver=le"
        command: ./start.sh

    db:
        image: postgres:11.2
        container_name: db
        restart: always
        env_file:
            - .env
        expose:
            - 5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
            interval: 10s
            timeout: 60s
            retries: 5
            start_period: 5s
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - app-db-data:/var/lib/postgresql/data/
    
    # pgadmin:
    #     image: dpage/pgadmin4
    #     hostname: pgadmin
    #     container_name: pgadmin
    #     restart: always
    #     env_file:
    #         - .env
    #     # ports:
    #     #     - 5050:5050
    #     expose:
    #         - "5050"
    #     depends_on:
    #         db:
    #             condition: service_healthy
    #     labels:
    #         # Enable Traefik for this specific "backend" service
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.geoidom.com`)"
    #         # Define the port inside of the Docker service to use
    #         - "traefik.http.services.pgadmin.loadbalancer.server.port=5050"
    #         - "traefik.http.routers.pgadmin.entrypoints=websecure"
    #         # Use the "le" (Let's Encrypt) resolver
    #         - "traefik.http.routers.pgadmin.tls=true"
    #         - "traefik.http.routers.pgadmin.tls.certresolver=le"
    #     environment:
    #         - PGDATA=/var/lib/postgresql/data/pgdata
    #     volumes:
    #         - pgadmin-data:/var/lib/pgadmin
        

volumes:
    # Create a volume to store the certificates, there is a constraint to make sure
    # Traefik is always deployed to the same Docker node with the same volume containing
    # the HTTPS-certificates
    traefik-public-certificates:
    api-data:
    app-db-data:
    # pgadmin-data:
