version: '3.8'

services:
    traefik:
        image: traefik:v2.10.4
        container_name: traefik
        restart: always
        ports:
            # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
            - 80:80
            # Listen on port 8080, insecure Dashboard
            - 8080:8080
        volumes:
            # Add Docker as a mounted volume, so that Traefik can read the labels of other services
            - /var/run/docker.sock:/var/run/docker.sock:ro
        command:
            # Enable Docker in Traefik, so that it reads labels from Doker services
            - "--providers.docker=true"
            # Do not expose all Docker services, only the ones explicitly exposed
            - "--providers.docker.exposedbydefault=false"
            # Create a entrypoint "http" listening on port 80
            - "--entrypoints.web.address=:80"
            # Enable the access log, with HTTP requests
            - "--accesslog"
            # Enable the Traefik log, for configurations and errors
            - "--log"
            # Dashboard
            - "--api.insecure" # Don't do that in production#

    app:
        container_name: app
        hostname: app
        restart: always
        build:
            context: .
            dockerfile: Dockerfile.prod
        expose:
            - "8000"
        env_file:
            - .env
        volumes:
            - api-data:/api
        depends_on:
            db:
                condition: service_healthy
        labels:
            # Enable Traefik for this specific "backend" service
            - "traefik.enable=true"
            - "traefik.http.routers.app.rule=Host(`localhost`)"
            # Define the port inside of the Docker service to use
            - "traefik.http.services.app.loadbalancer.server.port=8000"
        command: ./start.sh

    db:
        image: postgres:11.2
        container_name: db
        restart: always
        env_file:
            - .env
        expose:
            - "5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
            interval: 10s
            timeout: 60s
            retries: 5
            start_period: 5s
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - app-db-data:/var/lib/postgresql/data/
        

volumes:
    api-data:
    app-db-data:
